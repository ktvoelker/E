
Built-in types
==============

Void
  Normal definition and construction

Bool
  Normal definition and construction
  Must be the type of test expressions

Char
  Normal definition (as an enum) and construction
  Can also be constructed via special forms (char literals)

Int
UInt
  System-dependent aliases of parameterized Int and UInt

Int(bits : UInt(8))
UInt(bits : UInt(8))
  Special definition
  Construction via literals

Ptr(T)
  Alias of Array(T, False, 1, 1)

Const(T)
  Alias of Array(T, True, 1, 1)

Array(T, const : Bool)
  Alias of Array(T, const, 0, maxValue(UInt(32)))

Array(T, const : Bool, length : UInt(32))
  Alias of Array(T, const, length, length)

Array(T, const : Bool, minLength : UInt(32), maxLength : UInt(32))
  Special definition
  Normal construction
  Construction via literals
  When a test expression includes a comparison of the length of an Array-typed
  def, in any branch controlled by that test expression where the truth of the
  comparison is statically known, there is an implicit def with the same name
  as the def used in the comparison. The implicit def's value is the same as
  the comparison def, but its type is refined based on length information
  obtained from the comparison.

Tag(T)
  Special definition
  Normal construction (it's an enum, and the members of Tag(T) have the same names as
  the members of T)


Built-in functions
==================

length(T, a : Array(T, minLength : UInt(32), maxLength : UInt(32))) : UInt(32)
  Normal type
  Special definition
  Normal call
  Call with special effects in test expressions (see Array type above)

tag(T) : Tag(T)
  Special type (uses type operator Tag(T))
  Special definition
  Special call (parameter T must be a union type)

[un]ref(T, const : Bool, minLength : UInt(32), maxLength : UInt(32),
        p : Array(T, const, minLength, maxLength)) : Void
  Normal type
  Special definition
  Normal call
  References in a module make that module unsafe

cast(T, U, value : T) : U
  Normal type
  Special definition
  Normal call
  References in a module make that module unsafe

minValue(T) : T
maxValue(T) : T
  Normal type
  Special definition
  Can only be applied to bounded numeric types

new Ptr(T, value : T) : Ptr(T)
new Const(T, value : T) : Const(T)
new Array(T, const : Bool, length : UInt(32), value : T)
         : Array(T, const, length, length)
  Special case of "new" since Array does not have a normal definition

